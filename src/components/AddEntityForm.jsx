import { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import API from "../lib/axios";
import ProductSupplyForm from "./ProductSupplyForm";
import ServiceSupplyForm from "./ServiceSupplyForm";
import { useAuthStore } from "../store/useAuthStore";
import { v4 as uuidv4 } from "uuid";
import { toast } from "react-hot-toast";


const AddEntityForm = () => {
  const navigate = useNavigate();
  const user = useAuthStore((state) => state.user);
  const org_id = user?.org_id || "";

  const [form, setForm] = useState({
    vendor_id: "", // Will be generated by backend
    org_id: org_id,
    vendor_name: "",
    int_status: 1,
    company_name: "",
    address_line1: "",
    address_line2: "",
    city: "",
    state: "",
    pincode: "",
    company_email: "",
    gst_number: "",
    cin_number: "",
    contact_person_name: "",
    contact_person_email: "",
    contact_person_number: "", // Added this required field
    created_by: "admin",
    created_on: null, // Will be set by backend
    changed_by: "admin",
    changed_on: null, // Will be set by backend
    product_supply: false, // Additional fields for UI
    service_supply: false,
  });

  const [loading, setLoading] = useState(false);
  const [activeTab, setActiveTab] = useState("Vendor Details");
  const [createdVendorId, setCreatedVendorId] = useState(""); // Store generated vendor_id
  const [submitAttempted, setSubmitAttempted] = useState(false);
  const [uploadRows, setUploadRows] = useState([]); // {id,type,docTypeName,file,previewUrl}
  const [isUploading, setIsUploading] = useState(false);
  const [documentTypes, setDocumentTypes] = useState([]);

  // Fetch document types on component mount
  useEffect(() => {
    fetchDocumentTypes();
  }, []);

  const fetchDocumentTypes = async () => {
    try {
      console.log('Fetching document types for vendors...');
      const res = await API.get('/doc-type-objects/object-type/vendor');
      console.log('Document types response:', res.data);

      if (res.data && res.data.success && Array.isArray(res.data.data)) {
        // Transform API data to dropdown format
        const docTypes = res.data.data.map(docType => ({
          id: docType.dto_id,  // Use dto_id instead of doc_type
          text: docType.doc_type_text,
          doc_type: docType.doc_type  // Keep doc_type for reference
        }));
        setDocumentTypes(docTypes);
        console.log('Document types loaded:', docTypes);
      } else {
        console.log('No document types found, using fallback');
        setDocumentTypes([]);
      }
    } catch (err) {
      console.error('Error fetching document types:', err);
      toast.error('Failed to load document types');
      setDocumentTypes([]);
    }
  };

  const handleInputChange = (e) => {
    const { name, value, type, checked } = e.target;
    setForm((prev) => ({
      ...prev,
      [name]: type === "checkbox" ? checked : value,
    }));

    // Uncheck disables tab
    if (
      type === "checkbox" &&
      !checked &&
      activeTab ===
        (name === "product_supply"
          ? "Product Details"
          : name === "service_supply"
          ? "Service Details"
          : "")
    ) {
      setActiveTab("Vendor Details");
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setSubmitAttempted(true);
    try {
      setLoading(true);
      const response = await API.post("/create-vendor", form); // Backend adds ext_id, created_on, org_id
      const vendorId = response.data?.data?.vendor_id;
      setCreatedVendorId(vendorId || "");
      toast.success("Vendor created successfully!");
      // Optionally: navigate("/master-data/vendors");
    } catch (error) {
      console.error(error);
      const errorMessage = error.response?.data?.message || error.response?.data?.error || "Failed to create. Please try again.";
      toast.error(errorMessage);
    } finally {
      setLoading(false);
    }
  };

  const tabs = ["Vendor Details"];
  if (form.product_supply) tabs.push("Product Details");
  if (form.service_supply) tabs.push("Service Details");
  tabs.push("Attachments");

  // Helper for invalid field
  const isFieldInvalid = (val) => submitAttempted && !val.trim();

  // Handle batch upload for vendor documents
  const handleBatchUpload = async () => {
    if (uploadRows.length === 0) {
      toast.error('Add at least one file');
      return;
    }

    // Check if vendor has been created
    if (!createdVendorId) {
      toast.error('Please create the vendor first before uploading documents');
      return;
    }

    // Validate all attachments
    for (const r of uploadRows) {
      if (!r.type || !r.file) {
        toast.error('Select document type and choose a file for all rows');
        return;
      }
      // Check if the selected document type requires a custom name
      const selectedDocType = documentTypes.find(dt => dt.id === r.type);
      if (selectedDocType && (selectedDocType.text.toLowerCase().includes('other') || selectedDocType.doc_type === 'OT') && !r.docTypeName?.trim()) {
        toast.error(`Enter custom name for ${selectedDocType.text} documents`);
        return;
      }
    }

    setIsUploading(true);
    let successCount = 0;
    let failCount = 0;

    try {
      for (const r of uploadRows) {
        try {
          const fd = new FormData();
          fd.append('file', r.file);
          fd.append('vendor_id', createdVendorId); // Add vendor_id
          fd.append('dto_id', r.type);  // Send dto_id instead of doc_type
          if (r.type && r.docTypeName?.trim()) {
            fd.append('doc_type_name', r.docTypeName);
          }
          
          // Upload the file to the vendor document API
          await API.post('/vendor-docs/upload', fd, { 
            headers: { 'Content-Type': 'multipart/form-data' }
          });
          successCount++;
        } catch (err) {
          console.error('Failed to process file:', r.file.name, err);
          failCount++;
        }
      }

      if (successCount > 0) {
        if (failCount === 0) {
          toast.success('All files uploaded successfully');
        } else {
          toast.success(`${successCount} files uploaded, ${failCount} failed`);
        }
        setUploadRows([]); // Clear attachments after successful upload
      } else {
        toast.error('Failed to upload any files');
      }
    } catch (err) {
      console.error('Process error:', err);
      toast.error('Process failed');
    } finally {
      setIsUploading(false);
    }
  };

  return (
    <div className="max-w-7xl mx-auto mt-1 bg-white shadow rounded">
      {/* Card Header */}
      <div className="bg-[#0E2F4B] text-white py-3 px-6 rounded-t border-b-4 border-[#FFC107] flex justify-center items-center">
        {/* <span className="text-2xl font-semibold text-center w-full">Vendor Details</span> */}
      </div>

      <div className="px-8 pt-8">
        {/* Tabs */}
        <div className="flex border-b border-gray-200 mb-8">
          {tabs.map((tab) => (
            <button
              key={tab}
              className={`px-6 py-2 -mb-px font-semibold text-base border-b-2 focus:outline-none transition-all ${
                activeTab === tab
                  ? "border-[#0E2F4B] text-[#0E2F4B] bg-white"
                  : "border-transparent text-gray-500 bg-transparent"
              }`}
              onClick={() => setActiveTab(tab)}
              type="button"
            >
              {tab}
            </button>
          ))}
        </div>

        {/* Tab Content */}
        {activeTab === "Vendor Details" && (
          <form onSubmit={handleSubmit}>
            <div className="grid grid-cols-3 gap-6 mb-6">
                              {/* <FormInput label="Vendor Id" name="vendor_id" value={createdVendorId} readOnly /> */}
                <FormInput label="Vendor Name" name="vendor_name" value={form.vendor_name} onChange={handleInputChange} required isInvalid={isFieldInvalid(form.vendor_name)} />
                <FormInput label="Company" name="company_name" value={form.company_name} onChange={handleInputChange} required isInvalid={isFieldInvalid(form.company_name)} />
                <FormInput label="Company Email" name="company_email" value={form.company_email} onChange={handleInputChange} type="email" required isInvalid={isFieldInvalid(form.company_email)} />
              </div>

              <div className="grid grid-cols-3 gap-6 mb-6">
                <FormInput label="Contact Person Number" name="contact_person_number" value={form.contact_person_number} onChange={handleInputChange} required isInvalid={isFieldInvalid(form.contact_person_number)} />
              <FormInput label="GST Number" name="gst_number" value={form.gst_number} onChange={handleInputChange} />
              <FormInput label="CIN Number" name="cin_number" value={form.cin_number} onChange={handleInputChange} />
            </div>

            {/* Optional Address/Contact Fields */}
            <div className="grid grid-cols-3 gap-6 mb-6">
              <FormInput label="Address Line 1" name="address_line1" value={form.address_line1} onChange={handleInputChange} />
              <FormInput label="City" name="city" value={form.city} onChange={handleInputChange} />
              <FormInput label="State" name="state" value={form.state} onChange={handleInputChange} />
            </div>

            <div className="grid grid-cols-3 gap-6 mb-6">
              <FormInput label="Pincode" name="pincode" value={form.pincode} onChange={handleInputChange} />
              <FormInput label="Contact Person Name" name="contact_person_name" value={form.contact_person_name} onChange={handleInputChange} />
              <FormInput label="Contact Person Email" name="contact_person_email" value={form.contact_person_email} onChange={handleInputChange} />
            </div>

            {/* Checkboxes */}
            <div className="flex flex-col gap-3 mb-10 pl-2">
              <FormCheckbox label="Product Supply" name="product_supply" checked={form.product_supply} onChange={handleInputChange} />
              <FormCheckbox label="Service Supply" name="service_supply" checked={form.service_supply} onChange={handleInputChange} />
            </div>

            {/* Buttons */}
            <div className="flex justify-end gap-3 pb-8">
              <button
                type="button"
                onClick={() => navigate("/master-data/vendors")}
                className="bg-gray-300 text-gray-700 px-8 py-2 rounded text-base font-medium hover:bg-gray-400 transition"
                disabled={loading}
              >
                Cancel
              </button>
              <button
                type="submit"
                className="bg-[#002F5F] text-white px-8 py-2 rounded text-base font-medium hover:bg-[#0E2F4B] transition"
                disabled={loading}
              >
                {loading ? "Saving..." : "Save"}
              </button>
            </div>
          </form>
        )}

        {activeTab === "Product Details" && <ProductSupplyForm vendorId={createdVendorId} orgId={org_id} />}
        {activeTab === "Service Details" && <ServiceSupplyForm vendorId={createdVendorId} orgId={org_id} />}
        {activeTab === "Attachments" && (
          <div className="pb-8">
            {/* Header row: Add File button */}
            <div className="mb-4 flex items-end gap-3">
              <div></div>
            </div>

            <div className="mb-4 flex items-center justify-between">
              <div className="text-lg font-semibold">Attachments</div>
              <button 
                type="button" 
                onClick={() => setUploadRows(prev => ([...prev, { id: generateUUID(), type:'', docTypeName:'', file:null, previewUrl:'' }]))}
                className="h-[38px] px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 inline-flex items-center"
              >
                <svg className="w-4 h-4 mr-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4v16m8-8H4" />
                </svg>
                Add File
              </button>
            </div>

            <div className="text-sm text-gray-600 mb-3">
              Document types are loaded from the system configuration
              {!createdVendorId && (
                <span className="text-amber-600 font-medium ml-2">
                  ⚠️ Please create the vendor first before uploading documents
                </span>
              )}
            </div>

            {uploadRows.length === 0 ? (
              <div className="text-sm text-gray-500">No files added.</div>
            ) : (
              <div className="space-y-3">
                {uploadRows.map(r => (
                  <div key={r.id} className="grid grid-cols-6 gap-3 items-start bg-white border border-gray-200 rounded p-3">
                    <div className="col-span-2">
                      <label className="block text-xs font-medium mb-1">Document Type</label>
                      <select 
                        className="w-full border rounded px-2 py-2 text-sm h-[38px]" 
                        value={r.type} 
                        onChange={e => setUploadRows(prev => prev.map(x => x.id===r.id?{...x,type:e.target.value}:x))}
                      >
                        <option value="">Select type</option>
                        {documentTypes.map(docType => (
                          <option key={docType.id} value={docType.id}>
                            {docType.text}
                          </option>
                        ))}
                      </select>
                    </div>

                    {(() => {
                      const selectedDocType = documentTypes.find(dt => dt.id === r.type);
                      const needsCustomName = selectedDocType && (selectedDocType.text.toLowerCase().includes('other') || selectedDocType.doc_type === 'OT');
                      return needsCustomName && (
                        <div className="col-span-2">
                          <label className="block text-xs font-medium mb-1">Custom Name</label>
                          <input
                            className="w-full border rounded px-2 py-2 text-sm h-[38px]"
                            value={r.docTypeName}
                            onChange={e => setUploadRows(prev => prev.map(x => x.id===r.id?{...x,docTypeName:e.target.value}:x))}
                            placeholder={`Enter custom name for ${selectedDocType?.text}`}
                          />
                        </div>
                      );
                    })()}

                    <div className={(() => {
                      const selectedDocType = documentTypes.find(dt => dt.id === r.type);
                      const needsCustomName = selectedDocType && (selectedDocType.text.toLowerCase().includes('other') || selectedDocType.doc_type === 'OT');
                      return needsCustomName ? 'col-span-3' : 'col-span-4';
                    })()}>
                      <label className="block text-xs font-medium mb-1">File (Max 10MB)</label>
                      <div className="flex items-center gap-2">
                        <div className="relative flex-1 max-w-md">
                          <input
                            type="file"
                            id={`file-${r.id}`}
                            onChange={e => {
                              const f = e.target.files?.[0] || null;
                              if (f && f.size > 15 * 1024 * 1024) { // 15MB limit
                                toast.error('File size exceeds 15MB limit');
                                e.target.value = '';
                                return;
                              }
                              const previewUrl = f ? URL.createObjectURL(f) : '';
                              setUploadRows(prev => prev.map(x => x.id===r.id?{...x,file:f,previewUrl}:x));
                            }}
                            className="hidden"
                          />
                          <label
                            htmlFor={`file-${r.id}`}
                            className="flex items-center h-[38px] px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 cursor-pointer w-full"
                          >
                            <svg className="flex-shrink-0 w-5 h-5 mr-2 text-gray-400" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-8l-4-4m0 0L8 8m4-4v12" />
                            </svg>
                            <span className="truncate max-w-[200px] inline-block">
                              {r.file ? r.file.name : 'Choose file'}
                            </span>
                          </label>
                        </div>
                        {r.previewUrl && (
                          <a 
                            href={r.previewUrl} 
                            target="_blank" 
                            rel="noreferrer" 
                            className="h-[38px] inline-flex items-center px-4 bg-[#0E2F4B] text-white rounded-md shadow-sm text-sm font-medium hover:bg-[#1a4971] transition-colors"
                          >
                            <svg className="w-4 h-4 mr-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                            </svg>
                            Preview
                          </a>
                        )}
                        <button 
                          type="button" 
                          onClick={() => setUploadRows(prev => prev.filter(x => x.id!==r.id))}
                          className="h-[38px] inline-flex items-center px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 transition-colors"
                        >
                          <svg className="w-4 h-4 mr-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                          </svg>
                          Remove
                        </button>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            )}

            {/* Upload Button */}
            {uploadRows.length > 0 && (
              <div className="mt-6 flex justify-end">
                <button
                  type="button"
                  onClick={handleBatchUpload}
                  disabled={isUploading || !createdVendorId || uploadRows.some(r => {
                    if (!r.type || !r.file) return true;
                    const selectedDocType = documentTypes.find(dt => dt.id === r.type);
                    const needsCustomName = selectedDocType && (selectedDocType.text.toLowerCase().includes('other') || selectedDocType.doc_type === 'OT');
                    return needsCustomName && !r.docTypeName?.trim();
                  })}
                  className="h-[38px] inline-flex items-center px-6 bg-[#0E2F4B] text-white rounded-md shadow-sm text-sm font-medium hover:bg-[#1a4971] transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  {isUploading ? (
                    <span className="flex items-center">
                      <svg className="animate-spin h-4 w-4 mr-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                        <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                      </svg>
                      Uploading...
                    </span>
                  ) : (
                    <>
                      <svg className="w-4 h-4 mr-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-8l-4-4m0 0L8 8m4-4v12" />
                      </svg>
                      Upload All Files
                    </>
                  )}
                </button>
              </div>
            )}
          </div>
        )}
      </div>
    </div>
  );
};

// Reusable input component
const FormInput = ({ label, name, value, onChange, required = false, type = "text", readOnly = false, isInvalid = false }) => (
  <div>
    <label className="block text-sm font-medium mb-1 text-gray-700">
      {label} {required && <span className="text-red-500">*</span>}
    </label>
    <input
      type={type}
      name={name}
      value={value}
      onChange={onChange}
      required={required}
      readOnly={readOnly}
      className={`w-full px-3 py-2 border rounded text-sm ${readOnly ? 'bg-gray-200 text-gray-700 cursor-not-allowed' : 'bg-white'} ${isInvalid ? 'border-red-500' : 'border-gray-300'} ${readOnly && name === 'vendor_id' ? 'focus:ring-0 focus:border-gray-300 hover:border-gray-300' : 'focus:outline-none focus:ring-2 focus:ring-[#0E2F4B]'}`}
      placeholder={name === 'vendor_id' && !value ? 'Will be generated' : label}
      tabIndex={readOnly ? -1 : 0}
    />
  </div>
);

const FormCheckbox = ({ label, name, checked, onChange }) => (
  <label className="inline-flex items-center text-gray-700 text-base font-medium">
    <input
      type="checkbox"
      name={name}
      checked={checked}
      onChange={onChange}
      className="mr-2 w-4 h-4 accent-[#0E2F4B]"
    />
    {label}
  </label>
);

export default AddEntityForm;
